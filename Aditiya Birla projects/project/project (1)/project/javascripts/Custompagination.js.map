{"version":3,"sources":["src/javascripts/custom-pagination.js"],"names":[],"mappingsfile":"Custompagination.js","sourcesContent":["/*\r\n *  Custom-Pagination - v1.0.0\r\n */\r\n; (function ($, window, document, undefined) {\r\n\r\n    \"use strict\";\r\n    var pluginName = \"customPagination\",\r\n        defaults = {\r\n            totalPages: 6,\r\n            currentPage: 1,\r\n            startPage: 1,\r\n            endPage: 6,\r\n            showBefore: 2,\r\n            showAfter: 3,\r\n            prevButton: \".prev\",\r\n            nextButton: \".next\",\r\n            firstButton: \".first\",\r\n            lastButton: \".last\",\r\n            activeClass: 'active'\r\n        };\r\n\r\n    // The actual plugin constructor\r\n    function customPagination(element, options) {\r\n        this.element = element;\r\n\r\n        this.settings = $.extend({}, defaults, options);\r\n        this._defaults = defaults;\r\n        this._name = pluginName;\r\n        this.init();\r\n    }\r\n\r\n    // Avoid Plugin.prototype conflicts\r\n    $.extend(customPagination.prototype, {\r\n        init: function () {\r\n\r\n            // Place initialization logic here\r\n            // You already have access to the DOM element and\r\n            // the options via the instance, e.g. this.element\r\n            // and this.settings\r\n            // you can add more functions like the one below and\r\n            // call them like the example bellow\r\n            this.pager();\r\n            this.togglePrevNext();\r\n        },\r\n        pager: function () {\r\n\r\n            var totalPages = this.settings.totalPages,\r\n                currentPage = this.settings.currentPage,\r\n                startPage = this.settings.startPage,\r\n                endPage = this.settings.endPage,\r\n                showBefore = this.settings.showBefore,\r\n                showAfter = this.settings.showAfter,\r\n                activeClass = this.settings.activeClass;\r\n\r\n            // some logic\r\n            startPage = parseInt(currentPage) - parseInt(showBefore);\r\n            endPage = parseInt(currentPage) + parseInt(showAfter);\r\n\r\n            if (startPage <= 0) {\r\n                endPage -= (startPage - 1);\r\n                startPage = 1;\r\n            }\r\n\r\n            if (endPage > totalPages) {\r\n                endPage = totalPages;\r\n                startPage = 1;\r\n                if (endPage >= (showBefore + showAfter + 1)) {\r\n                    startPage = endPage - (showBefore + showAfter);\r\n                }\r\n            }\r\n\r\n            $(this.element).find(\".page\").hide();\r\n            $(this.element).find(\"[data-id='\" + startPage + \"']\").show();\r\n            $(this.element).find(\"[data-id='\" + startPage + \"']\").nextUntil(\"[data-id='\" + endPage + \"']\").show();\r\n            $(this.element).find(\"[data-id='\" + endPage + \"']\").show();\r\n            $(this.element).find(\"[data-id='\" + currentPage + \"']\").addClass(activeClass);\r\n        },\r\n        togglePrevNext: function () {\r\n\r\n            var prevButton = this.settings.prevButton,\r\n                nextButton = this.settings.nextButton,\r\n                firstButton = this.settings.firstButton,\r\n                lastButton = this.settings.lastButton;\r\n\r\n            if (this.settings.currentPage == 1) {\r\n                $(this.element).find(prevButton + ', ' + firstButton).addClass(\"disabled\");\r\n            }\r\n            if (this.settings.currentPage == this.settings.totalPages) {\r\n                $(this.element).find(nextButton + ', ' + lastButton).addClass(\"disabled\");\r\n            }\r\n        }\r\n    });\r\n\r\n    // A really lightweight plugin wrapper around the constructor,\r\n    // preventing against multiple instantiations\r\n    $.fn[pluginName] = function (options) {\r\n        return this.each(function () {\r\n            if (!$.data(this, \"plugin_\" + pluginName)) {\r\n                $.data(this, \"plugin_\" +\r\n                    pluginName, new customPagination(this, options));\r\n            }\r\n        });\r\n    };\r\n\r\n})(jQuery, window, document);"]}